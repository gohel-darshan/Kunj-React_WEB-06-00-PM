{"ast":null,"code":"// Voice recognition utility for hands-free quiz interaction\nexport class VoiceRecognition {\n  constructor() {\n    this.recognition = null;\n    this.isListening = false;\n    this.isSupported = false;\n    this.currentCallback = null;\n    this.currentOptions = [];\n    this.initializeRecognition();\n  }\n  initializeRecognition() {\n    // Check for browser support\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      console.warn('Speech recognition not supported in this browser');\n      return;\n    }\n    this.isSupported = true;\n    this.recognition = new SpeechRecognition();\n\n    // Configure recognition settings\n    this.recognition.continuous = false;\n    this.recognition.interimResults = false;\n    this.recognition.lang = 'en-US';\n    this.recognition.maxAlternatives = 3;\n\n    // Set up event handlers\n    this.recognition.onstart = () => {\n      this.isListening = true;\n      console.log('Voice recognition started');\n    };\n    this.recognition.onend = () => {\n      this.isListening = false;\n      console.log('Voice recognition ended');\n    };\n    this.recognition.onresult = event => {\n      this.handleResult(event);\n    };\n    this.recognition.onerror = event => {\n      console.error('Voice recognition error:', event.error);\n      this.isListening = false;\n      if (this.currentCallback) {\n        this.currentCallback({\n          success: false,\n          error: event.error\n        });\n      }\n    };\n  }\n\n  // Start listening for voice input\n  startListening(options, callback) {\n    if (!this.isSupported) {\n      callback({\n        success: false,\n        error: 'Voice recognition not supported'\n      });\n      return;\n    }\n    if (this.isListening) {\n      this.stopListening();\n    }\n    this.currentOptions = options;\n    this.currentCallback = callback;\n    try {\n      this.recognition.start();\n    } catch (error) {\n      console.error('Failed to start voice recognition:', error);\n      callback({\n        success: false,\n        error: error.message\n      });\n    }\n  }\n\n  // Stop listening\n  stopListening() {\n    if (this.recognition && this.isListening) {\n      this.recognition.stop();\n    }\n  }\n\n  // Handle recognition results\n  handleResult(event) {\n    const results = Array.from(event.results[0]);\n    const transcript = results[0].transcript.toLowerCase().trim();\n    console.log('Voice input received:', transcript);\n\n    // Try to match the transcript with available options\n    const matchedOption = this.matchTranscriptToOption(transcript);\n    if (this.currentCallback) {\n      this.currentCallback({\n        success: true,\n        transcript,\n        matchedOption,\n        confidence: results[0].confidence\n      });\n    }\n  }\n\n  // Match spoken text to quiz options\n  matchTranscriptToOption(transcript) {\n    if (!this.currentOptions || this.currentOptions.length === 0) {\n      return null;\n    }\n\n    // Direct option matching (A, B, C, D)\n    const letterMatch = transcript.match(/^([abcd])\\b/i);\n    if (letterMatch) {\n      const letterIndex = letterMatch[1].toLowerCase().charCodeAt(0) - 97; // a=0, b=1, etc.\n      if (letterIndex >= 0 && letterIndex < this.currentOptions.length) {\n        return {\n          index: letterIndex,\n          method: 'letter'\n        };\n      }\n    }\n\n    // Number matching (1, 2, 3, 4)\n    const numberMatch = transcript.match(/^(one|two|three|four|1|2|3|4)\\b/i);\n    if (numberMatch) {\n      const numberMap = {\n        'one': 0,\n        'two': 1,\n        'three': 2,\n        'four': 3,\n        '1': 0,\n        '2': 1,\n        '3': 2,\n        '4': 3\n      };\n      const numberIndex = numberMap[numberMatch[1].toLowerCase()];\n      if (numberIndex !== undefined && numberIndex < this.currentOptions.length) {\n        return {\n          index: numberIndex,\n          method: 'number'\n        };\n      }\n    }\n\n    // Fuzzy text matching with answer content\n    let bestMatch = null;\n    let bestScore = 0;\n    this.currentOptions.forEach((option, index) => {\n      const similarity = this.calculateSimilarity(transcript, option.toLowerCase());\n      if (similarity > bestScore && similarity > 0.6) {\n        // 60% similarity threshold\n        bestScore = similarity;\n        bestMatch = {\n          index,\n          method: 'content',\n          similarity\n        };\n      }\n    });\n\n    // Command matching\n    const commands = {\n      'skip': {\n        action: 'skip'\n      },\n      'hint': {\n        action: 'hint'\n      },\n      'fifty fifty': {\n        action: 'fiftyFifty'\n      },\n      '50 50': {\n        action: 'fiftyFifty'\n      },\n      'help': {\n        action: 'help'\n      },\n      'repeat': {\n        action: 'repeat'\n      },\n      'pause': {\n        action: 'pause'\n      },\n      'stop': {\n        action: 'stop'\n      }\n    };\n    for (const [command, action] of Object.entries(commands)) {\n      if (transcript.includes(command)) {\n        return {\n          action: action.action,\n          method: 'command'\n        };\n      }\n    }\n    return bestMatch;\n  }\n\n  // Calculate text similarity using Levenshtein distance\n  calculateSimilarity(str1, str2) {\n    const matrix = [];\n    const len1 = str1.length;\n    const len2 = str2.length;\n\n    // Initialize matrix\n    for (let i = 0; i <= len1; i++) {\n      matrix[i] = [i];\n    }\n    for (let j = 0; j <= len2; j++) {\n      matrix[0][j] = j;\n    }\n\n    // Fill matrix\n    for (let i = 1; i <= len1; i++) {\n      for (let j = 1; j <= len2; j++) {\n        const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\n        matrix[i][j] = Math.min(matrix[i - 1][j] + 1,\n        // deletion\n        matrix[i][j - 1] + 1,\n        // insertion\n        matrix[i - 1][j - 1] + cost // substitution\n        );\n      }\n    }\n    const maxLen = Math.max(len1, len2);\n    return maxLen === 0 ? 1 : (maxLen - matrix[len1][len2]) / maxLen;\n  }\n\n  // Get supported commands for help\n  getSupportedCommands() {\n    return ['Say \"A\", \"B\", \"C\", or \"D\" to select an answer', 'Say \"One\", \"Two\", \"Three\", or \"Four\" to select an answer', 'Say part of the answer text to select it', 'Say \"Skip\" to skip the current question', 'Say \"Hint\" to use a hint', 'Say \"Fifty Fifty\" to eliminate two wrong answers', 'Say \"Help\" to hear these commands again', 'Say \"Stop\" to stop voice recognition'];\n  }\n\n  // Check if voice recognition is supported\n  isVoiceSupported() {\n    return this.isSupported;\n  }\n\n  // Get current listening status\n  getListeningStatus() {\n    return this.isListening;\n  }\n}\n\n// Create singleton instance\nconst voiceRecognition = new VoiceRecognition();\nexport default voiceRecognition;","map":{"version":3,"names":["VoiceRecognition","constructor","recognition","isListening","isSupported","currentCallback","currentOptions","initializeRecognition","SpeechRecognition","window","webkitSpeechRecognition","console","warn","continuous","interimResults","lang","maxAlternatives","onstart","log","onend","onresult","event","handleResult","onerror","error","success","startListening","options","callback","stopListening","start","message","stop","results","Array","from","transcript","toLowerCase","trim","matchedOption","matchTranscriptToOption","confidence","length","letterMatch","match","letterIndex","charCodeAt","index","method","numberMatch","numberMap","numberIndex","undefined","bestMatch","bestScore","forEach","option","similarity","calculateSimilarity","commands","action","command","Object","entries","includes","str1","str2","matrix","len1","len2","i","j","cost","Math","min","maxLen","max","getSupportedCommands","isVoiceSupported","getListeningStatus","voiceRecognition"],"sources":["D:/R_W/react/quiz-app/src/utils/voiceRecognition.js"],"sourcesContent":["// Voice recognition utility for hands-free quiz interaction\r\nexport class VoiceRecognition {\r\n  constructor() {\r\n    this.recognition = null;\r\n    this.isListening = false;\r\n    this.isSupported = false;\r\n    this.currentCallback = null;\r\n    this.currentOptions = [];\r\n    \r\n    this.initializeRecognition();\r\n  }\r\n\r\n  initializeRecognition() {\r\n    // Check for browser support\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    \r\n    if (!SpeechRecognition) {\r\n      console.warn('Speech recognition not supported in this browser');\r\n      return;\r\n    }\r\n\r\n    this.isSupported = true;\r\n    this.recognition = new SpeechRecognition();\r\n    \r\n    // Configure recognition settings\r\n    this.recognition.continuous = false;\r\n    this.recognition.interimResults = false;\r\n    this.recognition.lang = 'en-US';\r\n    this.recognition.maxAlternatives = 3;\r\n\r\n    // Set up event handlers\r\n    this.recognition.onstart = () => {\r\n      this.isListening = true;\r\n      console.log('Voice recognition started');\r\n    };\r\n\r\n    this.recognition.onend = () => {\r\n      this.isListening = false;\r\n      console.log('Voice recognition ended');\r\n    };\r\n\r\n    this.recognition.onresult = (event) => {\r\n      this.handleResult(event);\r\n    };\r\n\r\n    this.recognition.onerror = (event) => {\r\n      console.error('Voice recognition error:', event.error);\r\n      this.isListening = false;\r\n      if (this.currentCallback) {\r\n        this.currentCallback({ success: false, error: event.error });\r\n      }\r\n    };\r\n  }\r\n\r\n  // Start listening for voice input\r\n  startListening(options, callback) {\r\n    if (!this.isSupported) {\r\n      callback({ success: false, error: 'Voice recognition not supported' });\r\n      return;\r\n    }\r\n\r\n    if (this.isListening) {\r\n      this.stopListening();\r\n    }\r\n\r\n    this.currentOptions = options;\r\n    this.currentCallback = callback;\r\n\r\n    try {\r\n      this.recognition.start();\r\n    } catch (error) {\r\n      console.error('Failed to start voice recognition:', error);\r\n      callback({ success: false, error: error.message });\r\n    }\r\n  }\r\n\r\n  // Stop listening\r\n  stopListening() {\r\n    if (this.recognition && this.isListening) {\r\n      this.recognition.stop();\r\n    }\r\n  }\r\n\r\n  // Handle recognition results\r\n  handleResult(event) {\r\n    const results = Array.from(event.results[0]);\r\n    const transcript = results[0].transcript.toLowerCase().trim();\r\n    \r\n    console.log('Voice input received:', transcript);\r\n\r\n    // Try to match the transcript with available options\r\n    const matchedOption = this.matchTranscriptToOption(transcript);\r\n    \r\n    if (this.currentCallback) {\r\n      this.currentCallback({\r\n        success: true,\r\n        transcript,\r\n        matchedOption,\r\n        confidence: results[0].confidence\r\n      });\r\n    }\r\n  }\r\n\r\n  // Match spoken text to quiz options\r\n  matchTranscriptToOption(transcript) {\r\n    if (!this.currentOptions || this.currentOptions.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    // Direct option matching (A, B, C, D)\r\n    const letterMatch = transcript.match(/^([abcd])\\b/i);\r\n    if (letterMatch) {\r\n      const letterIndex = letterMatch[1].toLowerCase().charCodeAt(0) - 97; // a=0, b=1, etc.\r\n      if (letterIndex >= 0 && letterIndex < this.currentOptions.length) {\r\n        return { index: letterIndex, method: 'letter' };\r\n      }\r\n    }\r\n\r\n    // Number matching (1, 2, 3, 4)\r\n    const numberMatch = transcript.match(/^(one|two|three|four|1|2|3|4)\\b/i);\r\n    if (numberMatch) {\r\n      const numberMap = { 'one': 0, 'two': 1, 'three': 2, 'four': 3, '1': 0, '2': 1, '3': 2, '4': 3 };\r\n      const numberIndex = numberMap[numberMatch[1].toLowerCase()];\r\n      if (numberIndex !== undefined && numberIndex < this.currentOptions.length) {\r\n        return { index: numberIndex, method: 'number' };\r\n      }\r\n    }\r\n\r\n    // Fuzzy text matching with answer content\r\n    let bestMatch = null;\r\n    let bestScore = 0;\r\n\r\n    this.currentOptions.forEach((option, index) => {\r\n      const similarity = this.calculateSimilarity(transcript, option.toLowerCase());\r\n      if (similarity > bestScore && similarity > 0.6) { // 60% similarity threshold\r\n        bestScore = similarity;\r\n        bestMatch = { index, method: 'content', similarity };\r\n      }\r\n    });\r\n\r\n    // Command matching\r\n    const commands = {\r\n      'skip': { action: 'skip' },\r\n      'hint': { action: 'hint' },\r\n      'fifty fifty': { action: 'fiftyFifty' },\r\n      '50 50': { action: 'fiftyFifty' },\r\n      'help': { action: 'help' },\r\n      'repeat': { action: 'repeat' },\r\n      'pause': { action: 'pause' },\r\n      'stop': { action: 'stop' }\r\n    };\r\n\r\n    for (const [command, action] of Object.entries(commands)) {\r\n      if (transcript.includes(command)) {\r\n        return { action: action.action, method: 'command' };\r\n      }\r\n    }\r\n\r\n    return bestMatch;\r\n  }\r\n\r\n  // Calculate text similarity using Levenshtein distance\r\n  calculateSimilarity(str1, str2) {\r\n    const matrix = [];\r\n    const len1 = str1.length;\r\n    const len2 = str2.length;\r\n\r\n    // Initialize matrix\r\n    for (let i = 0; i <= len1; i++) {\r\n      matrix[i] = [i];\r\n    }\r\n    for (let j = 0; j <= len2; j++) {\r\n      matrix[0][j] = j;\r\n    }\r\n\r\n    // Fill matrix\r\n    for (let i = 1; i <= len1; i++) {\r\n      for (let j = 1; j <= len2; j++) {\r\n        const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\r\n        matrix[i][j] = Math.min(\r\n          matrix[i - 1][j] + 1,      // deletion\r\n          matrix[i][j - 1] + 1,      // insertion\r\n          matrix[i - 1][j - 1] + cost // substitution\r\n        );\r\n      }\r\n    }\r\n\r\n    const maxLen = Math.max(len1, len2);\r\n    return maxLen === 0 ? 1 : (maxLen - matrix[len1][len2]) / maxLen;\r\n  }\r\n\r\n  // Get supported commands for help\r\n  getSupportedCommands() {\r\n    return [\r\n      'Say \"A\", \"B\", \"C\", or \"D\" to select an answer',\r\n      'Say \"One\", \"Two\", \"Three\", or \"Four\" to select an answer',\r\n      'Say part of the answer text to select it',\r\n      'Say \"Skip\" to skip the current question',\r\n      'Say \"Hint\" to use a hint',\r\n      'Say \"Fifty Fifty\" to eliminate two wrong answers',\r\n      'Say \"Help\" to hear these commands again',\r\n      'Say \"Stop\" to stop voice recognition'\r\n    ];\r\n  }\r\n\r\n  // Check if voice recognition is supported\r\n  isVoiceSupported() {\r\n    return this.isSupported;\r\n  }\r\n\r\n  // Get current listening status\r\n  getListeningStatus() {\r\n    return this.isListening;\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst voiceRecognition = new VoiceRecognition();\r\nexport default voiceRecognition;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}