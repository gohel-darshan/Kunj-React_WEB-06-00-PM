{"ast":null,"code":"// Sound management utility\nclass SoundManager {\n  constructor() {\n    this.sounds = {};\n    this.isMuted = false;\n    this.volume = 0.5;\n  }\n\n  // Initialize sound effects\n  initSounds() {\n    // Create audio contexts for different sound effects\n    this.sounds = {\n      correct: this.createBeep(800, 0.3, 'sine'),\n      wrong: this.createBeep(300, 0.5, 'sawtooth'),\n      tick: this.createBeep(600, 0.1, 'square'),\n      hint: this.createBeep(1000, 0.2, 'triangle'),\n      complete: this.createMelody([523, 659, 784, 1047], 0.3)\n    };\n  }\n\n  // Create a beep sound using Web Audio API\n  createBeep(frequency, duration, type = 'sine') {\n    return () => {\n      if (this.isMuted) return;\n      try {\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        const oscillator = audioContext.createOscillator();\n        const gainNode = audioContext.createGain();\n        oscillator.connect(gainNode);\n        gainNode.connect(audioContext.destination);\n        oscillator.frequency.value = frequency;\n        oscillator.type = type;\n        gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n        gainNode.gain.linearRampToValueAtTime(this.volume, audioContext.currentTime + 0.01);\n        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);\n        oscillator.start(audioContext.currentTime);\n        oscillator.stop(audioContext.currentTime + duration);\n      } catch (error) {\n        console.warn('Audio not supported:', error);\n      }\n    };\n  }\n\n  // Create a melody for completion sound\n  createMelody(frequencies, noteDuration) {\n    return () => {\n      if (this.isMuted) return;\n      frequencies.forEach((freq, index) => {\n        setTimeout(() => {\n          this.createBeep(freq, noteDuration)();\n        }, index * noteDuration * 1000);\n      });\n    };\n  }\n\n  // Play specific sound\n  play(soundName) {\n    if (this.sounds[soundName] && !this.isMuted) {\n      this.sounds[soundName]();\n    }\n  }\n\n  // Toggle mute\n  toggleMute() {\n    this.isMuted = !this.isMuted;\n    return this.isMuted;\n  }\n\n  // Set volume\n  setVolume(volume) {\n    this.volume = Math.max(0, Math.min(1, volume));\n  }\n\n  // Get mute status\n  getMuteStatus() {\n    return this.isMuted;\n  }\n}\nexport default new SoundManager();","map":{"version":3,"names":["SoundManager","constructor","sounds","isMuted","volume","initSounds","correct","createBeep","wrong","tick","hint","complete","createMelody","frequency","duration","type","audioContext","window","AudioContext","webkitAudioContext","oscillator","createOscillator","gainNode","createGain","connect","destination","value","gain","setValueAtTime","currentTime","linearRampToValueAtTime","exponentialRampToValueAtTime","start","stop","error","console","warn","frequencies","noteDuration","forEach","freq","index","setTimeout","play","soundName","toggleMute","setVolume","Math","max","min","getMuteStatus"],"sources":["D:/R_W/react/quiz-app/src/utils/soundManager.js"],"sourcesContent":["// Sound management utility\r\nclass SoundManager {\r\n  constructor() {\r\n    this.sounds = {};\r\n    this.isMuted = false;\r\n    this.volume = 0.5;\r\n  }\r\n\r\n  // Initialize sound effects\r\n  initSounds() {\r\n    // Create audio contexts for different sound effects\r\n    this.sounds = {\r\n      correct: this.createBeep(800, 0.3, 'sine'),\r\n      wrong: this.createBeep(300, 0.5, 'sawtooth'),\r\n      tick: this.createBeep(600, 0.1, 'square'),\r\n      hint: this.createBeep(1000, 0.2, 'triangle'),\r\n      complete: this.createMelody([523, 659, 784, 1047], 0.3)\r\n    };\r\n  }\r\n\r\n  // Create a beep sound using Web Audio API\r\n  createBeep(frequency, duration, type = 'sine') {\r\n    return () => {\r\n      if (this.isMuted) return;\r\n      \r\n      try {\r\n        const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n        const oscillator = audioContext.createOscillator();\r\n        const gainNode = audioContext.createGain();\r\n\r\n        oscillator.connect(gainNode);\r\n        gainNode.connect(audioContext.destination);\r\n\r\n        oscillator.frequency.value = frequency;\r\n        oscillator.type = type;\r\n\r\n        gainNode.gain.setValueAtTime(0, audioContext.currentTime);\r\n        gainNode.gain.linearRampToValueAtTime(this.volume, audioContext.currentTime + 0.01);\r\n        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);\r\n\r\n        oscillator.start(audioContext.currentTime);\r\n        oscillator.stop(audioContext.currentTime + duration);\r\n      } catch (error) {\r\n        console.warn('Audio not supported:', error);\r\n      }\r\n    };\r\n  }\r\n\r\n  // Create a melody for completion sound\r\n  createMelody(frequencies, noteDuration) {\r\n    return () => {\r\n      if (this.isMuted) return;\r\n      \r\n      frequencies.forEach((freq, index) => {\r\n        setTimeout(() => {\r\n          this.createBeep(freq, noteDuration)();\r\n        }, index * noteDuration * 1000);\r\n      });\r\n    };\r\n  }\r\n\r\n  // Play specific sound\r\n  play(soundName) {\r\n    if (this.sounds[soundName] && !this.isMuted) {\r\n      this.sounds[soundName]();\r\n    }\r\n  }\r\n\r\n  // Toggle mute\r\n  toggleMute() {\r\n    this.isMuted = !this.isMuted;\r\n    return this.isMuted;\r\n  }\r\n\r\n  // Set volume\r\n  setVolume(volume) {\r\n    this.volume = Math.max(0, Math.min(1, volume));\r\n  }\r\n\r\n  // Get mute status\r\n  getMuteStatus() {\r\n    return this.isMuted;\r\n  }\r\n}\r\n\r\nexport default new SoundManager();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}