{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport questionsData from '../data/questions.json';\nconst useQuiz = () => {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [isQuizFinished, setIsQuizFinished] = useState(false);\n  const [timer, setTimer] = useState(30); // 30 seconds timer\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  useEffect(() => {\n    if (timer > 0 && !isQuizFinished) {\n      const timerId = setInterval(() => {\n        setTimer(prevTimer => prevTimer - 1);\n      }, 1000);\n      return () => clearInterval(timerId);\n    } else if (timer === 0) {\n      finishQuiz();\n    }\n  }, [timer, isQuizFinished]);\n  const handleAnswerSelection = answer => {\n    setSelectedAnswers(prev => [...prev, answer]);\n    if (answer === questionsData[currentQuestionIndex].correctAnswer) {\n      setScore(prevScore => prevScore + 1);\n    }\n    nextQuestion();\n  };\n  const nextQuestion = () => {\n    if (currentQuestionIndex < questionsData.length - 1) {\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n    } else {\n      finishQuiz();\n    }\n  };\n  const finishQuiz = () => {\n    setIsQuizFinished(true);\n    clearInterval(timer);\n  };\n  const resetQuiz = () => {\n    setCurrentQuestionIndex(0);\n    setScore(0);\n    setIsQuizFinished(false);\n    setTimer(30);\n    setSelectedAnswers([]);\n  };\n  return {\n    currentQuestion: questionsData[currentQuestionIndex],\n    score,\n    isQuizFinished,\n    timer,\n    handleAnswerSelection,\n    resetQuiz,\n    selectedAnswers\n  };\n};\n_s(useQuiz, \"v06zmeZzhKuwLkaEkAO8WhGziS0=\");\nexport default useQuiz;","map":{"version":3,"names":["useState","useEffect","questionsData","useQuiz","_s","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","isQuizFinished","setIsQuizFinished","timer","setTimer","selectedAnswers","setSelectedAnswers","timerId","setInterval","prevTimer","clearInterval","finishQuiz","handleAnswerSelection","answer","prev","correctAnswer","prevScore","nextQuestion","length","prevIndex","resetQuiz","currentQuestion"],"sources":["D:/R_W/react/new_quize_app/quiz-app/src/hooks/useQuiz.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport questionsData from '../data/questions.json';\n\nconst useQuiz = () => {\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [score, setScore] = useState(0);\n    const [isQuizFinished, setIsQuizFinished] = useState(false);\n    const [timer, setTimer] = useState(30); // 30 seconds timer\n    const [selectedAnswers, setSelectedAnswers] = useState<string[]>([]);\n    \n    useEffect(() => {\n        if (timer > 0 && !isQuizFinished) {\n            const timerId = setInterval(() => {\n                setTimer(prevTimer => prevTimer - 1);\n            }, 1000);\n            return () => clearInterval(timerId);\n        } else if (timer === 0) {\n            finishQuiz();\n        }\n    }, [timer, isQuizFinished]);\n\n    const handleAnswerSelection = (answer: string) => {\n        setSelectedAnswers(prev => [...prev, answer]);\n        if (answer === questionsData[currentQuestionIndex].correctAnswer) {\n            setScore(prevScore => prevScore + 1);\n        }\n        nextQuestion();\n    };\n\n    const nextQuestion = () => {\n        if (currentQuestionIndex < questionsData.length - 1) {\n            setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n        } else {\n            finishQuiz();\n        }\n    };\n\n    const finishQuiz = () => {\n        setIsQuizFinished(true);\n        clearInterval(timer);\n    };\n\n    const resetQuiz = () => {\n        setCurrentQuestionIndex(0);\n        setScore(0);\n        setIsQuizFinished(false);\n        setTimer(30);\n        setSelectedAnswers([]);\n    };\n\n    return {\n        currentQuestion: questionsData[currentQuestionIndex],\n        score,\n        isQuizFinished,\n        timer,\n        handleAnswerSelection,\n        resetQuiz,\n        selectedAnswers,\n    };\n};\n\nexport default useQuiz;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,aAAa,MAAM,wBAAwB;AAElD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAW,EAAE,CAAC;EAEpEC,SAAS,CAAC,MAAM;IACZ,IAAIU,KAAK,GAAG,CAAC,IAAI,CAACF,cAAc,EAAE;MAC9B,MAAMM,OAAO,GAAGC,WAAW,CAAC,MAAM;QAC9BJ,QAAQ,CAACK,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;MACxC,CAAC,EAAE,IAAI,CAAC;MACR,OAAO,MAAMC,aAAa,CAACH,OAAO,CAAC;IACvC,CAAC,MAAM,IAAIJ,KAAK,KAAK,CAAC,EAAE;MACpBQ,UAAU,CAAC,CAAC;IAChB;EACJ,CAAC,EAAE,CAACR,KAAK,EAAEF,cAAc,CAAC,CAAC;EAE3B,MAAMW,qBAAqB,GAAIC,MAAc,IAAK;IAC9CP,kBAAkB,CAACQ,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,MAAM,CAAC,CAAC;IAC7C,IAAIA,MAAM,KAAKnB,aAAa,CAACG,oBAAoB,CAAC,CAACkB,aAAa,EAAE;MAC9Df,QAAQ,CAACgB,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;IACxC;IACAC,YAAY,CAAC,CAAC;EAClB,CAAC;EAED,MAAMA,YAAY,GAAGA,CAAA,KAAM;IACvB,IAAIpB,oBAAoB,GAAGH,aAAa,CAACwB,MAAM,GAAG,CAAC,EAAE;MACjDpB,uBAAuB,CAACqB,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;IACvD,CAAC,MAAM;MACHR,UAAU,CAAC,CAAC;IAChB;EACJ,CAAC;EAED,MAAMA,UAAU,GAAGA,CAAA,KAAM;IACrBT,iBAAiB,CAAC,IAAI,CAAC;IACvBQ,aAAa,CAACP,KAAK,CAAC;EACxB,CAAC;EAED,MAAMiB,SAAS,GAAGA,CAAA,KAAM;IACpBtB,uBAAuB,CAAC,CAAC,CAAC;IAC1BE,QAAQ,CAAC,CAAC,CAAC;IACXE,iBAAiB,CAAC,KAAK,CAAC;IACxBE,QAAQ,CAAC,EAAE,CAAC;IACZE,kBAAkB,CAAC,EAAE,CAAC;EAC1B,CAAC;EAED,OAAO;IACHe,eAAe,EAAE3B,aAAa,CAACG,oBAAoB,CAAC;IACpDE,KAAK;IACLE,cAAc;IACdE,KAAK;IACLS,qBAAqB;IACrBQ,SAAS;IACTf;EACJ,CAAC;AACL,CAAC;AAACT,EAAA,CAxDID,OAAO;AA0Db,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}