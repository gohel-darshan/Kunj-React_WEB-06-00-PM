{"ast":null,"code":"// Achievement system for the quiz app\nexport const ACHIEVEMENTS = {\n  FIRST_QUIZ: {\n    id: 'first_quiz',\n    name: 'Getting Started',\n    description: 'Complete your first quiz',\n    icon: '🎯',\n    condition: stats => stats.totalQuizzes >= 1\n  },\n  PERFECT_SCORE: {\n    id: 'perfect_score',\n    name: 'Perfectionist',\n    description: 'Get 100% on any quiz',\n    icon: '🏆',\n    condition: stats => stats.bestPercentage === 100\n  },\n  SPEED_DEMON: {\n    id: 'speed_demon',\n    name: 'Speed Demon',\n    description: 'Answer 5 questions in under 30 seconds total',\n    icon: '⚡',\n    condition: stats => stats.fastestFiveQuestions < 30000\n  },\n  STREAK_MASTER: {\n    id: 'streak_master',\n    name: 'Streak Master',\n    description: 'Get 10 correct answers in a row',\n    icon: '🔥',\n    condition: stats => stats.longestStreak >= 10\n  },\n  CATEGORY_EXPERT: {\n    id: 'category_expert',\n    name: 'Category Expert',\n    description: 'Get 90%+ in all categories',\n    icon: '🧠',\n    condition: stats => {\n      const categories = ['science', 'history', 'geography', 'technology', 'sports'];\n      return categories.every(cat => {\n        var _stats$categoryStats$;\n        return ((_stats$categoryStats$ = stats.categoryStats[cat]) === null || _stats$categoryStats$ === void 0 ? void 0 : _stats$categoryStats$.percentage) >= 90;\n      });\n    }\n  },\n  QUIZ_ADDICT: {\n    id: 'quiz_addict',\n    name: 'Quiz Addict',\n    description: 'Complete 50 quizzes',\n    icon: '🎮',\n    condition: stats => stats.totalQuizzes >= 50\n  },\n  HARD_MODE_HERO: {\n    id: 'hard_mode_hero',\n    name: 'Hard Mode Hero',\n    description: 'Complete 10 hard difficulty quizzes',\n    icon: '💪',\n    condition: stats => stats.hardQuizzes >= 10\n  },\n  NO_HINTS_NEEDED: {\n    id: 'no_hints_needed',\n    name: 'No Hints Needed',\n    description: 'Complete a quiz without using any hints',\n    icon: '🧩',\n    condition: stats => stats.quizzesWithoutHints >= 1\n  },\n  COMEBACK_KID: {\n    id: 'comeback_kid',\n    name: 'Comeback Kid',\n    description: 'Score 80%+ after scoring below 50%',\n    icon: '📈',\n    condition: stats => stats.hasComeback === true\n  },\n  KNOWLEDGE_SEEKER: {\n    id: 'knowledge_seeker',\n    name: 'Knowledge Seeker',\n    description: 'Answer 1000 questions total',\n    icon: '📚',\n    condition: stats => stats.totalQuestions >= 1000\n  }\n};\nexport const checkAchievements = stats => {\n  const unlockedAchievements = [];\n  const existingAchievements = stats.achievements || [];\n  Object.values(ACHIEVEMENTS).forEach(achievement => {\n    if (!existingAchievements.includes(achievement.id) && achievement.condition(stats)) {\n      unlockedAchievements.push(achievement);\n    }\n  });\n  return unlockedAchievements;\n};\nexport const getAchievementProgress = stats => {\n  const progress = {};\n  Object.values(ACHIEVEMENTS).forEach(achievement => {\n    var _stats$achievements;\n    const unlocked = ((_stats$achievements = stats.achievements) === null || _stats$achievements === void 0 ? void 0 : _stats$achievements.includes(achievement.id)) || false;\n    progress[achievement.id] = {\n      ...achievement,\n      unlocked,\n      progress: unlocked ? 100 : calculateProgress(achievement, stats)\n    };\n  });\n  return progress;\n};\nconst calculateProgress = (achievement, stats) => {\n  switch (achievement.id) {\n    case 'first_quiz':\n      return Math.min(100, stats.totalQuizzes / 1 * 100);\n    case 'perfect_score':\n      return Math.min(100, stats.bestPercentage || 0);\n    case 'speed_demon':\n      return stats.fastestFiveQuestions ? Math.max(0, 100 - (stats.fastestFiveQuestions - 30000) / 1000) : 0;\n    case 'streak_master':\n      return Math.min(100, (stats.longestStreak || 0) / 10 * 100);\n    case 'quiz_addict':\n      return Math.min(100, (stats.totalQuizzes || 0) / 50 * 100);\n    case 'hard_mode_hero':\n      return Math.min(100, (stats.hardQuizzes || 0) / 10 * 100);\n    case 'knowledge_seeker':\n      return Math.min(100, (stats.totalQuestions || 0) / 1000 * 100);\n    default:\n      return 0;\n  }\n};","map":{"version":3,"names":["ACHIEVEMENTS","FIRST_QUIZ","id","name","description","icon","condition","stats","totalQuizzes","PERFECT_SCORE","bestPercentage","SPEED_DEMON","fastestFiveQuestions","STREAK_MASTER","longestStreak","CATEGORY_EXPERT","categories","every","cat","_stats$categoryStats$","categoryStats","percentage","QUIZ_ADDICT","HARD_MODE_HERO","hardQuizzes","NO_HINTS_NEEDED","quizzesWithoutHints","COMEBACK_KID","hasComeback","KNOWLEDGE_SEEKER","totalQuestions","checkAchievements","unlockedAchievements","existingAchievements","achievements","Object","values","forEach","achievement","includes","push","getAchievementProgress","progress","_stats$achievements","unlocked","calculateProgress","Math","min","max"],"sources":["D:/R_W/react/quiz-app/src/utils/achievements.js"],"sourcesContent":["// Achievement system for the quiz app\r\nexport const ACHIEVEMENTS = {\r\n  FIRST_QUIZ: {\r\n    id: 'first_quiz',\r\n    name: 'Getting Started',\r\n    description: 'Complete your first quiz',\r\n    icon: '🎯',\r\n    condition: (stats) => stats.totalQuizzes >= 1\r\n  },\r\n  PERFECT_SCORE: {\r\n    id: 'perfect_score',\r\n    name: 'Perfectionist',\r\n    description: 'Get 100% on any quiz',\r\n    icon: '🏆',\r\n    condition: (stats) => stats.bestPercentage === 100\r\n  },\r\n  SPEED_DEMON: {\r\n    id: 'speed_demon',\r\n    name: 'Speed Demon',\r\n    description: 'Answer 5 questions in under 30 seconds total',\r\n    icon: '⚡',\r\n    condition: (stats) => stats.fastestFiveQuestions < 30000\r\n  },\r\n  STREAK_MASTER: {\r\n    id: 'streak_master',\r\n    name: 'Streak Master',\r\n    description: 'Get 10 correct answers in a row',\r\n    icon: '🔥',\r\n    condition: (stats) => stats.longestStreak >= 10\r\n  },\r\n  CATEGORY_EXPERT: {\r\n    id: 'category_expert',\r\n    name: 'Category Expert',\r\n    description: 'Get 90%+ in all categories',\r\n    icon: '🧠',\r\n    condition: (stats) => {\r\n      const categories = ['science', 'history', 'geography', 'technology', 'sports'];\r\n      return categories.every(cat => stats.categoryStats[cat]?.percentage >= 90);\r\n    }\r\n  },\r\n  QUIZ_ADDICT: {\r\n    id: 'quiz_addict',\r\n    name: 'Quiz Addict',\r\n    description: 'Complete 50 quizzes',\r\n    icon: '🎮',\r\n    condition: (stats) => stats.totalQuizzes >= 50\r\n  },\r\n  HARD_MODE_HERO: {\r\n    id: 'hard_mode_hero',\r\n    name: 'Hard Mode Hero',\r\n    description: 'Complete 10 hard difficulty quizzes',\r\n    icon: '💪',\r\n    condition: (stats) => stats.hardQuizzes >= 10\r\n  },\r\n  NO_HINTS_NEEDED: {\r\n    id: 'no_hints_needed',\r\n    name: 'No Hints Needed',\r\n    description: 'Complete a quiz without using any hints',\r\n    icon: '🧩',\r\n    condition: (stats) => stats.quizzesWithoutHints >= 1\r\n  },\r\n  COMEBACK_KID: {\r\n    id: 'comeback_kid',\r\n    name: 'Comeback Kid',\r\n    description: 'Score 80%+ after scoring below 50%',\r\n    icon: '📈',\r\n    condition: (stats) => stats.hasComeback === true\r\n  },\r\n  KNOWLEDGE_SEEKER: {\r\n    id: 'knowledge_seeker',\r\n    name: 'Knowledge Seeker',\r\n    description: 'Answer 1000 questions total',\r\n    icon: '📚',\r\n    condition: (stats) => stats.totalQuestions >= 1000\r\n  }\r\n};\r\n\r\nexport const checkAchievements = (stats) => {\r\n  const unlockedAchievements = [];\r\n  const existingAchievements = stats.achievements || [];\r\n  \r\n  Object.values(ACHIEVEMENTS).forEach(achievement => {\r\n    if (!existingAchievements.includes(achievement.id) && achievement.condition(stats)) {\r\n      unlockedAchievements.push(achievement);\r\n    }\r\n  });\r\n  \r\n  return unlockedAchievements;\r\n};\r\n\r\nexport const getAchievementProgress = (stats) => {\r\n  const progress = {};\r\n  \r\n  Object.values(ACHIEVEMENTS).forEach(achievement => {\r\n    const unlocked = stats.achievements?.includes(achievement.id) || false;\r\n    progress[achievement.id] = {\r\n      ...achievement,\r\n      unlocked,\r\n      progress: unlocked ? 100 : calculateProgress(achievement, stats)\r\n    };\r\n  });\r\n  \r\n  return progress;\r\n};\r\n\r\nconst calculateProgress = (achievement, stats) => {\r\n  switch (achievement.id) {\r\n    case 'first_quiz':\r\n      return Math.min(100, (stats.totalQuizzes / 1) * 100);\r\n    case 'perfect_score':\r\n      return Math.min(100, stats.bestPercentage || 0);\r\n    case 'speed_demon':\r\n      return stats.fastestFiveQuestions ? Math.max(0, 100 - ((stats.fastestFiveQuestions - 30000) / 1000)) : 0;\r\n    case 'streak_master':\r\n      return Math.min(100, ((stats.longestStreak || 0) / 10) * 100);\r\n    case 'quiz_addict':\r\n      return Math.min(100, ((stats.totalQuizzes || 0) / 50) * 100);\r\n    case 'hard_mode_hero':\r\n      return Math.min(100, ((stats.hardQuizzes || 0) / 10) * 100);\r\n    case 'knowledge_seeker':\r\n      return Math.min(100, ((stats.totalQuestions || 0) / 1000) * 100);\r\n    default:\r\n      return 0;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}