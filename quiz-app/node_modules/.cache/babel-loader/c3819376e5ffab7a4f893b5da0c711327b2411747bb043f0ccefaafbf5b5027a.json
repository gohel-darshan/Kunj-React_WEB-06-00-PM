{"ast":null,"code":"// AI Question Generator (Mock implementation - would integrate with real AI service)\nexport class AIQuestionGenerator {\n  constructor() {\n    this.apiKey = null; // Would be set from environment variables\n    this.baseURL = 'https://api.openai.com/v1/chat/completions'; // Example API\n    this.isEnabled = false; // Set to true when API key is available\n  }\n\n  // Initialize with API key\n  initialize(apiKey) {\n    this.apiKey = apiKey;\n    this.isEnabled = !!apiKey;\n  }\n\n  // Generate questions based on topic and difficulty\n  async generateQuestions(topic, difficulty, count = 5) {\n    if (!this.isEnabled) {\n      // Return mock questions when AI is not available\n      return this.generateMockQuestions(topic, difficulty, count);\n    }\n    try {\n      const prompt = this.createPrompt(topic, difficulty, count);\n      const response = await this.callAI(prompt);\n      return this.parseAIResponse(response);\n    } catch (error) {\n      console.error('AI question generation failed:', error);\n      // Fallback to mock questions\n      return this.generateMockQuestions(topic, difficulty, count);\n    }\n  }\n\n  // Create prompt for AI\n  createPrompt(topic, difficulty, count) {\n    const difficultyDescriptions = {\n      easy: 'basic knowledge level, suitable for beginners',\n      medium: 'intermediate knowledge level, requiring some expertise',\n      hard: 'advanced knowledge level, challenging for experts'\n    };\n    return `Generate ${count} multiple-choice questions about ${topic} at ${difficulty} difficulty level (${difficultyDescriptions[difficulty]}).\n\nRequirements:\n- Each question should have exactly 4 options (A, B, C, D)\n- Only one correct answer per question\n- Questions should be factual and educational\n- Avoid ambiguous or trick questions\n- Include diverse subtopics within ${topic}\n\nFormat the response as a JSON array with this structure:\n[\n  {\n    \"question\": \"Question text here?\",\n    \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\n    \"correctAnswer\": 0,\n    \"explanation\": \"Brief explanation of the correct answer\",\n    \"category\": \"${topic}\",\n    \"difficulty\": \"${difficulty}\",\n    \"subtopic\": \"Specific subtopic\"\n  }\n]`;\n  }\n\n  // Call AI API (mock implementation)\n  async callAI(prompt) {\n    // This would be a real API call in production\n    // For now, return mock response\n    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay\n\n    // Mock AI response\n    return {\n      choices: [{\n        message: {\n          content: JSON.stringify(this.generateMockQuestions('science', 'medium', 3))\n        }\n      }]\n    };\n  }\n\n  // Parse AI response\n  parseAIResponse(response) {\n    try {\n      const content = response.choices[0].message.content;\n      const questions = JSON.parse(content);\n\n      // Validate questions format\n      return questions.filter(q => q.question && Array.isArray(q.options) && q.options.length === 4 && typeof q.correctAnswer === 'number' && q.correctAnswer >= 0 && q.correctAnswer < 4);\n    } catch (error) {\n      console.error('Failed to parse AI response:', error);\n      return [];\n    }\n  }\n\n  // Generate mock questions when AI is not available\n  generateMockQuestions(topic, difficulty, count) {\n    const mockQuestions = {\n      science: {\n        easy: [{\n          question: \"What is the chemical symbol for water?\",\n          options: [\"H2O\", \"CO2\", \"NaCl\", \"O2\"],\n          correctAnswer: 0,\n          explanation: \"Water is composed of two hydrogen atoms and one oxygen atom, hence H2O.\",\n          category: \"science\",\n          difficulty: \"easy\",\n          subtopic: \"chemistry\"\n        }, {\n          question: \"Which planet is closest to the Sun?\",\n          options: [\"Venus\", \"Mercury\", \"Earth\", \"Mars\"],\n          correctAnswer: 1,\n          explanation: \"Mercury is the innermost planet in our solar system.\",\n          category: \"science\",\n          difficulty: \"easy\",\n          subtopic: \"astronomy\"\n        }],\n        medium: [{\n          question: \"What is the powerhouse of the cell?\",\n          options: [\"Nucleus\", \"Ribosome\", \"Mitochondria\", \"Endoplasmic Reticulum\"],\n          correctAnswer: 2,\n          explanation: \"Mitochondria produce ATP, the energy currency of cells.\",\n          category: \"science\",\n          difficulty: \"medium\",\n          subtopic: \"biology\"\n        }],\n        hard: [{\n          question: \"What is the Heisenberg Uncertainty Principle?\",\n          options: [\"Energy cannot be created or destroyed\", \"Position and momentum cannot be precisely determined simultaneously\", \"Matter and energy are equivalent\", \"Entropy always increases\"],\n          correctAnswer: 1,\n          explanation: \"The uncertainty principle states that the more precisely we know position, the less precisely we can know momentum, and vice versa.\",\n          category: \"science\",\n          difficulty: \"hard\",\n          subtopic: \"physics\"\n        }]\n      },\n      history: {\n        easy: [{\n          question: \"Who was the first President of the United States?\",\n          options: [\"Thomas Jefferson\", \"George Washington\", \"John Adams\", \"Benjamin Franklin\"],\n          correctAnswer: 1,\n          explanation: \"George Washington served as the first President from 1789 to 1797.\",\n          category: \"history\",\n          difficulty: \"easy\",\n          subtopic: \"american_history\"\n        }]\n      }\n    };\n    const topicQuestions = mockQuestions[topic] || mockQuestions.science;\n    const difficultyQuestions = topicQuestions[difficulty] || topicQuestions.easy;\n\n    // Repeat questions if we need more than available\n    const result = [];\n    for (let i = 0; i < count; i++) {\n      const questionIndex = i % difficultyQuestions.length;\n      result.push({\n        ...difficultyQuestions[questionIndex],\n        id: `ai_generated_${Date.now()}_${i}`\n      });\n    }\n    return result;\n  }\n\n  // Generate questions based on user's weak areas\n  async generateAdaptiveQuestions(userStats, count = 5) {\n    // Analyze user's performance to identify weak areas\n    const weakAreas = this.analyzeWeakAreas(userStats);\n    if (weakAreas.length === 0) {\n      // If no weak areas, generate mixed difficulty questions\n      return this.generateQuestions('general', 'medium', count);\n    }\n\n    // Generate questions focusing on weak areas\n    const questions = [];\n    for (const area of weakAreas.slice(0, 3)) {\n      // Focus on top 3 weak areas\n      const areaQuestions = await this.generateQuestions(area.category, area.suggestedDifficulty, Math.ceil(count / weakAreas.length));\n      questions.push(...areaQuestions);\n    }\n    return questions.slice(0, count);\n  }\n\n  // Analyze user statistics to find weak areas\n  analyzeWeakAreas(userStats) {\n    const weakAreas = [];\n    if (userStats.categoryStats) {\n      Object.entries(userStats.categoryStats).forEach(([category, stats]) => {\n        if (stats.percentage < 70) {\n          // Below 70% is considered weak\n          weakAreas.push({\n            category,\n            percentage: stats.percentage,\n            suggestedDifficulty: stats.percentage < 50 ? 'easy' : 'medium'\n          });\n        }\n      });\n    }\n\n    // Sort by weakest areas first\n    return weakAreas.sort((a, b) => a.percentage - b.percentage);\n  }\n\n  // Check if AI generation is available\n  isAIAvailable() {\n    return this.isEnabled;\n  }\n\n  // Get available topics for AI generation\n  getAvailableTopics() {\n    return ['science', 'history', 'geography', 'technology', 'sports', 'literature', 'art', 'music', 'mathematics', 'philosophy', 'psychology', 'economics', 'politics', 'medicine', 'environment'];\n  }\n}\n\n// Create singleton instance\nconst aiQuestionGenerator = new AIQuestionGenerator();\nexport default aiQuestionGenerator;","map":{"version":3,"names":["AIQuestionGenerator","constructor","apiKey","baseURL","isEnabled","initialize","generateQuestions","topic","difficulty","count","generateMockQuestions","prompt","createPrompt","response","callAI","parseAIResponse","error","console","difficultyDescriptions","easy","medium","hard","Promise","resolve","setTimeout","choices","message","content","JSON","stringify","questions","parse","filter","q","question","Array","isArray","options","length","correctAnswer","mockQuestions","science","explanation","category","subtopic","history","topicQuestions","difficultyQuestions","result","i","questionIndex","push","id","Date","now","generateAdaptiveQuestions","userStats","weakAreas","analyzeWeakAreas","area","slice","areaQuestions","suggestedDifficulty","Math","ceil","categoryStats","Object","entries","forEach","stats","percentage","sort","a","b","isAIAvailable","getAvailableTopics","aiQuestionGenerator"],"sources":["D:/R_W/react/quiz-app/src/utils/aiQuestionGenerator.js"],"sourcesContent":["// AI Question Generator (Mock implementation - would integrate with real AI service)\r\nexport class AIQuestionGenerator {\r\n  constructor() {\r\n    this.apiKey = null; // Would be set from environment variables\r\n    this.baseURL = 'https://api.openai.com/v1/chat/completions'; // Example API\r\n    this.isEnabled = false; // Set to true when API key is available\r\n  }\r\n\r\n  // Initialize with API key\r\n  initialize(apiKey) {\r\n    this.apiKey = apiKey;\r\n    this.isEnabled = !!apiKey;\r\n  }\r\n\r\n  // Generate questions based on topic and difficulty\r\n  async generateQuestions(topic, difficulty, count = 5) {\r\n    if (!this.isEnabled) {\r\n      // Return mock questions when AI is not available\r\n      return this.generateMockQuestions(topic, difficulty, count);\r\n    }\r\n\r\n    try {\r\n      const prompt = this.createPrompt(topic, difficulty, count);\r\n      const response = await this.callAI(prompt);\r\n      return this.parseAIResponse(response);\r\n    } catch (error) {\r\n      console.error('AI question generation failed:', error);\r\n      // Fallback to mock questions\r\n      return this.generateMockQuestions(topic, difficulty, count);\r\n    }\r\n  }\r\n\r\n  // Create prompt for AI\r\n  createPrompt(topic, difficulty, count) {\r\n    const difficultyDescriptions = {\r\n      easy: 'basic knowledge level, suitable for beginners',\r\n      medium: 'intermediate knowledge level, requiring some expertise',\r\n      hard: 'advanced knowledge level, challenging for experts'\r\n    };\r\n\r\n    return `Generate ${count} multiple-choice questions about ${topic} at ${difficulty} difficulty level (${difficultyDescriptions[difficulty]}).\r\n\r\nRequirements:\r\n- Each question should have exactly 4 options (A, B, C, D)\r\n- Only one correct answer per question\r\n- Questions should be factual and educational\r\n- Avoid ambiguous or trick questions\r\n- Include diverse subtopics within ${topic}\r\n\r\nFormat the response as a JSON array with this structure:\r\n[\r\n  {\r\n    \"question\": \"Question text here?\",\r\n    \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\r\n    \"correctAnswer\": 0,\r\n    \"explanation\": \"Brief explanation of the correct answer\",\r\n    \"category\": \"${topic}\",\r\n    \"difficulty\": \"${difficulty}\",\r\n    \"subtopic\": \"Specific subtopic\"\r\n  }\r\n]`;\r\n  }\r\n\r\n  // Call AI API (mock implementation)\r\n  async callAI(prompt) {\r\n    // This would be a real API call in production\r\n    // For now, return mock response\r\n    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay\r\n    \r\n    // Mock AI response\r\n    return {\r\n      choices: [{\r\n        message: {\r\n          content: JSON.stringify(this.generateMockQuestions('science', 'medium', 3))\r\n        }\r\n      }]\r\n    };\r\n  }\r\n\r\n  // Parse AI response\r\n  parseAIResponse(response) {\r\n    try {\r\n      const content = response.choices[0].message.content;\r\n      const questions = JSON.parse(content);\r\n      \r\n      // Validate questions format\r\n      return questions.filter(q => \r\n        q.question && \r\n        Array.isArray(q.options) && \r\n        q.options.length === 4 &&\r\n        typeof q.correctAnswer === 'number' &&\r\n        q.correctAnswer >= 0 && \r\n        q.correctAnswer < 4\r\n      );\r\n    } catch (error) {\r\n      console.error('Failed to parse AI response:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Generate mock questions when AI is not available\r\n  generateMockQuestions(topic, difficulty, count) {\r\n    const mockQuestions = {\r\n      science: {\r\n        easy: [\r\n          {\r\n            question: \"What is the chemical symbol for water?\",\r\n            options: [\"H2O\", \"CO2\", \"NaCl\", \"O2\"],\r\n            correctAnswer: 0,\r\n            explanation: \"Water is composed of two hydrogen atoms and one oxygen atom, hence H2O.\",\r\n            category: \"science\",\r\n            difficulty: \"easy\",\r\n            subtopic: \"chemistry\"\r\n          },\r\n          {\r\n            question: \"Which planet is closest to the Sun?\",\r\n            options: [\"Venus\", \"Mercury\", \"Earth\", \"Mars\"],\r\n            correctAnswer: 1,\r\n            explanation: \"Mercury is the innermost planet in our solar system.\",\r\n            category: \"science\",\r\n            difficulty: \"easy\",\r\n            subtopic: \"astronomy\"\r\n          }\r\n        ],\r\n        medium: [\r\n          {\r\n            question: \"What is the powerhouse of the cell?\",\r\n            options: [\"Nucleus\", \"Ribosome\", \"Mitochondria\", \"Endoplasmic Reticulum\"],\r\n            correctAnswer: 2,\r\n            explanation: \"Mitochondria produce ATP, the energy currency of cells.\",\r\n            category: \"science\",\r\n            difficulty: \"medium\",\r\n            subtopic: \"biology\"\r\n          }\r\n        ],\r\n        hard: [\r\n          {\r\n            question: \"What is the Heisenberg Uncertainty Principle?\",\r\n            options: [\r\n              \"Energy cannot be created or destroyed\",\r\n              \"Position and momentum cannot be precisely determined simultaneously\",\r\n              \"Matter and energy are equivalent\",\r\n              \"Entropy always increases\"\r\n            ],\r\n            correctAnswer: 1,\r\n            explanation: \"The uncertainty principle states that the more precisely we know position, the less precisely we can know momentum, and vice versa.\",\r\n            category: \"science\",\r\n            difficulty: \"hard\",\r\n            subtopic: \"physics\"\r\n          }\r\n        ]\r\n      },\r\n      history: {\r\n        easy: [\r\n          {\r\n            question: \"Who was the first President of the United States?\",\r\n            options: [\"Thomas Jefferson\", \"George Washington\", \"John Adams\", \"Benjamin Franklin\"],\r\n            correctAnswer: 1,\r\n            explanation: \"George Washington served as the first President from 1789 to 1797.\",\r\n            category: \"history\",\r\n            difficulty: \"easy\",\r\n            subtopic: \"american_history\"\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    const topicQuestions = mockQuestions[topic] || mockQuestions.science;\r\n    const difficultyQuestions = topicQuestions[difficulty] || topicQuestions.easy;\r\n    \r\n    // Repeat questions if we need more than available\r\n    const result = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const questionIndex = i % difficultyQuestions.length;\r\n      result.push({\r\n        ...difficultyQuestions[questionIndex],\r\n        id: `ai_generated_${Date.now()}_${i}`\r\n      });\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  // Generate questions based on user's weak areas\r\n  async generateAdaptiveQuestions(userStats, count = 5) {\r\n    // Analyze user's performance to identify weak areas\r\n    const weakAreas = this.analyzeWeakAreas(userStats);\r\n    \r\n    if (weakAreas.length === 0) {\r\n      // If no weak areas, generate mixed difficulty questions\r\n      return this.generateQuestions('general', 'medium', count);\r\n    }\r\n\r\n    // Generate questions focusing on weak areas\r\n    const questions = [];\r\n    for (const area of weakAreas.slice(0, 3)) { // Focus on top 3 weak areas\r\n      const areaQuestions = await this.generateQuestions(\r\n        area.category, \r\n        area.suggestedDifficulty, \r\n        Math.ceil(count / weakAreas.length)\r\n      );\r\n      questions.push(...areaQuestions);\r\n    }\r\n\r\n    return questions.slice(0, count);\r\n  }\r\n\r\n  // Analyze user statistics to find weak areas\r\n  analyzeWeakAreas(userStats) {\r\n    const weakAreas = [];\r\n    \r\n    if (userStats.categoryStats) {\r\n      Object.entries(userStats.categoryStats).forEach(([category, stats]) => {\r\n        if (stats.percentage < 70) { // Below 70% is considered weak\r\n          weakAreas.push({\r\n            category,\r\n            percentage: stats.percentage,\r\n            suggestedDifficulty: stats.percentage < 50 ? 'easy' : 'medium'\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    // Sort by weakest areas first\r\n    return weakAreas.sort((a, b) => a.percentage - b.percentage);\r\n  }\r\n\r\n  // Check if AI generation is available\r\n  isAIAvailable() {\r\n    return this.isEnabled;\r\n  }\r\n\r\n  // Get available topics for AI generation\r\n  getAvailableTopics() {\r\n    return [\r\n      'science', 'history', 'geography', 'technology', 'sports',\r\n      'literature', 'art', 'music', 'mathematics', 'philosophy',\r\n      'psychology', 'economics', 'politics', 'medicine', 'environment'\r\n    ];\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst aiQuestionGenerator = new AIQuestionGenerator();\r\nexport default aiQuestionGenerator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}