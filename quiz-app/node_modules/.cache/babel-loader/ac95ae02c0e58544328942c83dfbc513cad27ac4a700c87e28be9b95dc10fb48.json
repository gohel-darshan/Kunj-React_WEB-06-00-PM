{"ast":null,"code":"import _objectSpread from\"D:/R_W/react/quiz-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Achievement system for the quiz app\nexport const ACHIEVEMENTS={FIRST_QUIZ:{id:'first_quiz',name:'Getting Started',description:'Complete your first quiz',icon:'🎯',condition:stats=>stats.totalQuizzes>=1},PERFECT_SCORE:{id:'perfect_score',name:'Perfectionist',description:'Get 100% on any quiz',icon:'🏆',condition:stats=>stats.bestPercentage===100},SPEED_DEMON:{id:'speed_demon',name:'Speed Demon',description:'Answer 5 questions in under 30 seconds total',icon:'⚡',condition:stats=>stats.fastestFiveQuestions<30000},STREAK_MASTER:{id:'streak_master',name:'Streak Master',description:'Get 10 correct answers in a row',icon:'🔥',condition:stats=>stats.longestStreak>=10},CATEGORY_EXPERT:{id:'category_expert',name:'Category Expert',description:'Get 90%+ in all categories',icon:'🧠',condition:stats=>{const categories=['science','history','geography','technology','sports'];return categories.every(cat=>{var _stats$categoryStats$;return((_stats$categoryStats$=stats.categoryStats[cat])===null||_stats$categoryStats$===void 0?void 0:_stats$categoryStats$.percentage)>=90;});}},QUIZ_ADDICT:{id:'quiz_addict',name:'Quiz Addict',description:'Complete 50 quizzes',icon:'🎮',condition:stats=>stats.totalQuizzes>=50},HARD_MODE_HERO:{id:'hard_mode_hero',name:'Hard Mode Hero',description:'Complete 10 hard difficulty quizzes',icon:'💪',condition:stats=>stats.hardQuizzes>=10},NO_HINTS_NEEDED:{id:'no_hints_needed',name:'No Hints Needed',description:'Complete a quiz without using any hints',icon:'🧩',condition:stats=>stats.quizzesWithoutHints>=1},COMEBACK_KID:{id:'comeback_kid',name:'Comeback Kid',description:'Score 80%+ after scoring below 50%',icon:'📈',condition:stats=>stats.hasComeback===true},KNOWLEDGE_SEEKER:{id:'knowledge_seeker',name:'Knowledge Seeker',description:'Answer 1000 questions total',icon:'📚',condition:stats=>stats.totalQuestions>=1000}};export const checkAchievements=stats=>{const unlockedAchievements=[];const existingAchievements=stats.achievements||[];Object.values(ACHIEVEMENTS).forEach(achievement=>{if(!existingAchievements.includes(achievement.id)&&achievement.condition(stats)){unlockedAchievements.push(achievement);}});return unlockedAchievements;};export const getAchievementProgress=stats=>{const progress={};Object.values(ACHIEVEMENTS).forEach(achievement=>{var _stats$achievements;const unlocked=((_stats$achievements=stats.achievements)===null||_stats$achievements===void 0?void 0:_stats$achievements.includes(achievement.id))||false;progress[achievement.id]=_objectSpread(_objectSpread({},achievement),{},{unlocked,progress:unlocked?100:calculateProgress(achievement,stats)});});return progress;};const calculateProgress=(achievement,stats)=>{switch(achievement.id){case'first_quiz':return Math.min(100,stats.totalQuizzes/1*100);case'perfect_score':return Math.min(100,stats.bestPercentage||0);case'speed_demon':return stats.fastestFiveQuestions?Math.max(0,100-(stats.fastestFiveQuestions-30000)/1000):0;case'streak_master':return Math.min(100,(stats.longestStreak||0)/10*100);case'quiz_addict':return Math.min(100,(stats.totalQuizzes||0)/50*100);case'hard_mode_hero':return Math.min(100,(stats.hardQuizzes||0)/10*100);case'knowledge_seeker':return Math.min(100,(stats.totalQuestions||0)/1000*100);default:return 0;}};","map":{"version":3,"names":["ACHIEVEMENTS","FIRST_QUIZ","id","name","description","icon","condition","stats","totalQuizzes","PERFECT_SCORE","bestPercentage","SPEED_DEMON","fastestFiveQuestions","STREAK_MASTER","longestStreak","CATEGORY_EXPERT","categories","every","cat","_stats$categoryStats$","categoryStats","percentage","QUIZ_ADDICT","HARD_MODE_HERO","hardQuizzes","NO_HINTS_NEEDED","quizzesWithoutHints","COMEBACK_KID","hasComeback","KNOWLEDGE_SEEKER","totalQuestions","checkAchievements","unlockedAchievements","existingAchievements","achievements","Object","values","forEach","achievement","includes","push","getAchievementProgress","progress","_stats$achievements","unlocked","_objectSpread","calculateProgress","Math","min","max"],"sources":["D:/R_W/react/quiz-app/src/utils/achievements.js"],"sourcesContent":["// Achievement system for the quiz app\r\nexport const ACHIEVEMENTS = {\r\n  FIRST_QUIZ: {\r\n    id: 'first_quiz',\r\n    name: 'Getting Started',\r\n    description: 'Complete your first quiz',\r\n    icon: '🎯',\r\n    condition: (stats) => stats.totalQuizzes >= 1\r\n  },\r\n  PERFECT_SCORE: {\r\n    id: 'perfect_score',\r\n    name: 'Perfectionist',\r\n    description: 'Get 100% on any quiz',\r\n    icon: '🏆',\r\n    condition: (stats) => stats.bestPercentage === 100\r\n  },\r\n  SPEED_DEMON: {\r\n    id: 'speed_demon',\r\n    name: 'Speed Demon',\r\n    description: 'Answer 5 questions in under 30 seconds total',\r\n    icon: '⚡',\r\n    condition: (stats) => stats.fastestFiveQuestions < 30000\r\n  },\r\n  STREAK_MASTER: {\r\n    id: 'streak_master',\r\n    name: 'Streak Master',\r\n    description: 'Get 10 correct answers in a row',\r\n    icon: '🔥',\r\n    condition: (stats) => stats.longestStreak >= 10\r\n  },\r\n  CATEGORY_EXPERT: {\r\n    id: 'category_expert',\r\n    name: 'Category Expert',\r\n    description: 'Get 90%+ in all categories',\r\n    icon: '🧠',\r\n    condition: (stats) => {\r\n      const categories = ['science', 'history', 'geography', 'technology', 'sports'];\r\n      return categories.every(cat => stats.categoryStats[cat]?.percentage >= 90);\r\n    }\r\n  },\r\n  QUIZ_ADDICT: {\r\n    id: 'quiz_addict',\r\n    name: 'Quiz Addict',\r\n    description: 'Complete 50 quizzes',\r\n    icon: '🎮',\r\n    condition: (stats) => stats.totalQuizzes >= 50\r\n  },\r\n  HARD_MODE_HERO: {\r\n    id: 'hard_mode_hero',\r\n    name: 'Hard Mode Hero',\r\n    description: 'Complete 10 hard difficulty quizzes',\r\n    icon: '💪',\r\n    condition: (stats) => stats.hardQuizzes >= 10\r\n  },\r\n  NO_HINTS_NEEDED: {\r\n    id: 'no_hints_needed',\r\n    name: 'No Hints Needed',\r\n    description: 'Complete a quiz without using any hints',\r\n    icon: '🧩',\r\n    condition: (stats) => stats.quizzesWithoutHints >= 1\r\n  },\r\n  COMEBACK_KID: {\r\n    id: 'comeback_kid',\r\n    name: 'Comeback Kid',\r\n    description: 'Score 80%+ after scoring below 50%',\r\n    icon: '📈',\r\n    condition: (stats) => stats.hasComeback === true\r\n  },\r\n  KNOWLEDGE_SEEKER: {\r\n    id: 'knowledge_seeker',\r\n    name: 'Knowledge Seeker',\r\n    description: 'Answer 1000 questions total',\r\n    icon: '📚',\r\n    condition: (stats) => stats.totalQuestions >= 1000\r\n  }\r\n};\r\n\r\nexport const checkAchievements = (stats) => {\r\n  const unlockedAchievements = [];\r\n  const existingAchievements = stats.achievements || [];\r\n  \r\n  Object.values(ACHIEVEMENTS).forEach(achievement => {\r\n    if (!existingAchievements.includes(achievement.id) && achievement.condition(stats)) {\r\n      unlockedAchievements.push(achievement);\r\n    }\r\n  });\r\n  \r\n  return unlockedAchievements;\r\n};\r\n\r\nexport const getAchievementProgress = (stats) => {\r\n  const progress = {};\r\n  \r\n  Object.values(ACHIEVEMENTS).forEach(achievement => {\r\n    const unlocked = stats.achievements?.includes(achievement.id) || false;\r\n    progress[achievement.id] = {\r\n      ...achievement,\r\n      unlocked,\r\n      progress: unlocked ? 100 : calculateProgress(achievement, stats)\r\n    };\r\n  });\r\n  \r\n  return progress;\r\n};\r\n\r\nconst calculateProgress = (achievement, stats) => {\r\n  switch (achievement.id) {\r\n    case 'first_quiz':\r\n      return Math.min(100, (stats.totalQuizzes / 1) * 100);\r\n    case 'perfect_score':\r\n      return Math.min(100, stats.bestPercentage || 0);\r\n    case 'speed_demon':\r\n      return stats.fastestFiveQuestions ? Math.max(0, 100 - ((stats.fastestFiveQuestions - 30000) / 1000)) : 0;\r\n    case 'streak_master':\r\n      return Math.min(100, ((stats.longestStreak || 0) / 10) * 100);\r\n    case 'quiz_addict':\r\n      return Math.min(100, ((stats.totalQuizzes || 0) / 50) * 100);\r\n    case 'hard_mode_hero':\r\n      return Math.min(100, ((stats.hardQuizzes || 0) / 10) * 100);\r\n    case 'knowledge_seeker':\r\n      return Math.min(100, ((stats.totalQuestions || 0) / 1000) * 100);\r\n    default:\r\n      return 0;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}