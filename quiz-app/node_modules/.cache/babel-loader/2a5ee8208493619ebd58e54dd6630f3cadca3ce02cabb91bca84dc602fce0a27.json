{"ast":null,"code":"import _objectSpread from\"D:/R_W/react/quiz-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// AI Question Generator (Mock implementation - would integrate with real AI service)\nexport class AIQuestionGenerator{constructor(){this.apiKey=null;// Would be set from environment variables\nthis.baseURL='https://api.openai.com/v1/chat/completions';// Example API\nthis.isEnabled=false;// Set to true when API key is available\n}// Initialize with API key\ninitialize(apiKey){this.apiKey=apiKey;this.isEnabled=!!apiKey;}// Generate questions based on topic and difficulty\nasync generateQuestions(topic,difficulty){let count=arguments.length>2&&arguments[2]!==undefined?arguments[2]:5;if(!this.isEnabled){// Return mock questions when AI is not available\nreturn this.generateMockQuestions(topic,difficulty,count);}try{const prompt=this.createPrompt(topic,difficulty,count);const response=await this.callAI(prompt);return this.parseAIResponse(response);}catch(error){console.error('AI question generation failed:',error);// Fallback to mock questions\nreturn this.generateMockQuestions(topic,difficulty,count);}}// Create prompt for AI\ncreatePrompt(topic,difficulty,count){const difficultyDescriptions={easy:'basic knowledge level, suitable for beginners',medium:'intermediate knowledge level, requiring some expertise',hard:'advanced knowledge level, challenging for experts'};return\"Generate \".concat(count,\" multiple-choice questions about \").concat(topic,\" at \").concat(difficulty,\" difficulty level (\").concat(difficultyDescriptions[difficulty],\").\\n\\nRequirements:\\n- Each question should have exactly 4 options (A, B, C, D)\\n- Only one correct answer per question\\n- Questions should be factual and educational\\n- Avoid ambiguous or trick questions\\n- Include diverse subtopics within \").concat(topic,\"\\n\\nFormat the response as a JSON array with this structure:\\n[\\n  {\\n    \\\"question\\\": \\\"Question text here?\\\",\\n    \\\"options\\\": [\\\"Option A\\\", \\\"Option B\\\", \\\"Option C\\\", \\\"Option D\\\"],\\n    \\\"correctAnswer\\\": 0,\\n    \\\"explanation\\\": \\\"Brief explanation of the correct answer\\\",\\n    \\\"category\\\": \\\"\").concat(topic,\"\\\",\\n    \\\"difficulty\\\": \\\"\").concat(difficulty,\"\\\",\\n    \\\"subtopic\\\": \\\"Specific subtopic\\\"\\n  }\\n]\");}// Call AI API (mock implementation)\nasync callAI(prompt){// This would be a real API call in production\n// For now, return mock response\nawait new Promise(resolve=>setTimeout(resolve,1000));// Simulate API delay\n// Mock AI response\nreturn{choices:[{message:{content:JSON.stringify(this.generateMockQuestions('science','medium',3))}}]};}// Parse AI response\nparseAIResponse(response){try{const content=response.choices[0].message.content;const questions=JSON.parse(content);// Validate questions format\nreturn questions.filter(q=>q.question&&Array.isArray(q.options)&&q.options.length===4&&typeof q.correctAnswer==='number'&&q.correctAnswer>=0&&q.correctAnswer<4);}catch(error){console.error('Failed to parse AI response:',error);return[];}}// Generate mock questions when AI is not available\ngenerateMockQuestions(topic,difficulty,count){const mockQuestions={science:{easy:[{question:\"What is the chemical symbol for water?\",options:[\"H2O\",\"CO2\",\"NaCl\",\"O2\"],correctAnswer:0,explanation:\"Water is composed of two hydrogen atoms and one oxygen atom, hence H2O.\",category:\"science\",difficulty:\"easy\",subtopic:\"chemistry\"},{question:\"Which planet is closest to the Sun?\",options:[\"Venus\",\"Mercury\",\"Earth\",\"Mars\"],correctAnswer:1,explanation:\"Mercury is the innermost planet in our solar system.\",category:\"science\",difficulty:\"easy\",subtopic:\"astronomy\"}],medium:[{question:\"What is the powerhouse of the cell?\",options:[\"Nucleus\",\"Ribosome\",\"Mitochondria\",\"Endoplasmic Reticulum\"],correctAnswer:2,explanation:\"Mitochondria produce ATP, the energy currency of cells.\",category:\"science\",difficulty:\"medium\",subtopic:\"biology\"}],hard:[{question:\"What is the Heisenberg Uncertainty Principle?\",options:[\"Energy cannot be created or destroyed\",\"Position and momentum cannot be precisely determined simultaneously\",\"Matter and energy are equivalent\",\"Entropy always increases\"],correctAnswer:1,explanation:\"The uncertainty principle states that the more precisely we know position, the less precisely we can know momentum, and vice versa.\",category:\"science\",difficulty:\"hard\",subtopic:\"physics\"}]},history:{easy:[{question:\"Who was the first President of the United States?\",options:[\"Thomas Jefferson\",\"George Washington\",\"John Adams\",\"Benjamin Franklin\"],correctAnswer:1,explanation:\"George Washington served as the first President from 1789 to 1797.\",category:\"history\",difficulty:\"easy\",subtopic:\"american_history\"}]}};const topicQuestions=mockQuestions[topic]||mockQuestions.science;const difficultyQuestions=topicQuestions[difficulty]||topicQuestions.easy;// Repeat questions if we need more than available\nconst result=[];for(let i=0;i<count;i++){const questionIndex=i%difficultyQuestions.length;result.push(_objectSpread(_objectSpread({},difficultyQuestions[questionIndex]),{},{id:\"ai_generated_\".concat(Date.now(),\"_\").concat(i)}));}return result;}// Generate questions based on user's weak areas\nasync generateAdaptiveQuestions(userStats){let count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;// Analyze user's performance to identify weak areas\nconst weakAreas=this.analyzeWeakAreas(userStats);if(weakAreas.length===0){// If no weak areas, generate mixed difficulty questions\nreturn this.generateQuestions('general','medium',count);}// Generate questions focusing on weak areas\nconst questions=[];for(const area of weakAreas.slice(0,3)){// Focus on top 3 weak areas\nconst areaQuestions=await this.generateQuestions(area.category,area.suggestedDifficulty,Math.ceil(count/weakAreas.length));questions.push(...areaQuestions);}return questions.slice(0,count);}// Analyze user statistics to find weak areas\nanalyzeWeakAreas(userStats){const weakAreas=[];if(userStats.categoryStats){Object.entries(userStats.categoryStats).forEach(_ref=>{let[category,stats]=_ref;if(stats.percentage<70){// Below 70% is considered weak\nweakAreas.push({category,percentage:stats.percentage,suggestedDifficulty:stats.percentage<50?'easy':'medium'});}});}// Sort by weakest areas first\nreturn weakAreas.sort((a,b)=>a.percentage-b.percentage);}// Check if AI generation is available\nisAIAvailable(){return this.isEnabled;}// Get available topics for AI generation\ngetAvailableTopics(){return['science','history','geography','technology','sports','literature','art','music','mathematics','philosophy','psychology','economics','politics','medicine','environment'];}}// Create singleton instance\nconst aiQuestionGenerator=new AIQuestionGenerator();export default aiQuestionGenerator;","map":{"version":3,"names":["AIQuestionGenerator","constructor","apiKey","baseURL","isEnabled","initialize","generateQuestions","topic","difficulty","count","arguments","length","undefined","generateMockQuestions","prompt","createPrompt","response","callAI","parseAIResponse","error","console","difficultyDescriptions","easy","medium","hard","concat","Promise","resolve","setTimeout","choices","message","content","JSON","stringify","questions","parse","filter","q","question","Array","isArray","options","correctAnswer","mockQuestions","science","explanation","category","subtopic","history","topicQuestions","difficultyQuestions","result","i","questionIndex","push","_objectSpread","id","Date","now","generateAdaptiveQuestions","userStats","weakAreas","analyzeWeakAreas","area","slice","areaQuestions","suggestedDifficulty","Math","ceil","categoryStats","Object","entries","forEach","_ref","stats","percentage","sort","a","b","isAIAvailable","getAvailableTopics","aiQuestionGenerator"],"sources":["D:/R_W/react/quiz-app/src/utils/aiQuestionGenerator.js"],"sourcesContent":["// AI Question Generator (Mock implementation - would integrate with real AI service)\r\nexport class AIQuestionGenerator {\r\n  constructor() {\r\n    this.apiKey = null; // Would be set from environment variables\r\n    this.baseURL = 'https://api.openai.com/v1/chat/completions'; // Example API\r\n    this.isEnabled = false; // Set to true when API key is available\r\n  }\r\n\r\n  // Initialize with API key\r\n  initialize(apiKey) {\r\n    this.apiKey = apiKey;\r\n    this.isEnabled = !!apiKey;\r\n  }\r\n\r\n  // Generate questions based on topic and difficulty\r\n  async generateQuestions(topic, difficulty, count = 5) {\r\n    if (!this.isEnabled) {\r\n      // Return mock questions when AI is not available\r\n      return this.generateMockQuestions(topic, difficulty, count);\r\n    }\r\n\r\n    try {\r\n      const prompt = this.createPrompt(topic, difficulty, count);\r\n      const response = await this.callAI(prompt);\r\n      return this.parseAIResponse(response);\r\n    } catch (error) {\r\n      console.error('AI question generation failed:', error);\r\n      // Fallback to mock questions\r\n      return this.generateMockQuestions(topic, difficulty, count);\r\n    }\r\n  }\r\n\r\n  // Create prompt for AI\r\n  createPrompt(topic, difficulty, count) {\r\n    const difficultyDescriptions = {\r\n      easy: 'basic knowledge level, suitable for beginners',\r\n      medium: 'intermediate knowledge level, requiring some expertise',\r\n      hard: 'advanced knowledge level, challenging for experts'\r\n    };\r\n\r\n    return `Generate ${count} multiple-choice questions about ${topic} at ${difficulty} difficulty level (${difficultyDescriptions[difficulty]}).\r\n\r\nRequirements:\r\n- Each question should have exactly 4 options (A, B, C, D)\r\n- Only one correct answer per question\r\n- Questions should be factual and educational\r\n- Avoid ambiguous or trick questions\r\n- Include diverse subtopics within ${topic}\r\n\r\nFormat the response as a JSON array with this structure:\r\n[\r\n  {\r\n    \"question\": \"Question text here?\",\r\n    \"options\": [\"Option A\", \"Option B\", \"Option C\", \"Option D\"],\r\n    \"correctAnswer\": 0,\r\n    \"explanation\": \"Brief explanation of the correct answer\",\r\n    \"category\": \"${topic}\",\r\n    \"difficulty\": \"${difficulty}\",\r\n    \"subtopic\": \"Specific subtopic\"\r\n  }\r\n]`;\r\n  }\r\n\r\n  // Call AI API (mock implementation)\r\n  async callAI(prompt) {\r\n    // This would be a real API call in production\r\n    // For now, return mock response\r\n    await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API delay\r\n    \r\n    // Mock AI response\r\n    return {\r\n      choices: [{\r\n        message: {\r\n          content: JSON.stringify(this.generateMockQuestions('science', 'medium', 3))\r\n        }\r\n      }]\r\n    };\r\n  }\r\n\r\n  // Parse AI response\r\n  parseAIResponse(response) {\r\n    try {\r\n      const content = response.choices[0].message.content;\r\n      const questions = JSON.parse(content);\r\n      \r\n      // Validate questions format\r\n      return questions.filter(q => \r\n        q.question && \r\n        Array.isArray(q.options) && \r\n        q.options.length === 4 &&\r\n        typeof q.correctAnswer === 'number' &&\r\n        q.correctAnswer >= 0 && \r\n        q.correctAnswer < 4\r\n      );\r\n    } catch (error) {\r\n      console.error('Failed to parse AI response:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Generate mock questions when AI is not available\r\n  generateMockQuestions(topic, difficulty, count) {\r\n    const mockQuestions = {\r\n      science: {\r\n        easy: [\r\n          {\r\n            question: \"What is the chemical symbol for water?\",\r\n            options: [\"H2O\", \"CO2\", \"NaCl\", \"O2\"],\r\n            correctAnswer: 0,\r\n            explanation: \"Water is composed of two hydrogen atoms and one oxygen atom, hence H2O.\",\r\n            category: \"science\",\r\n            difficulty: \"easy\",\r\n            subtopic: \"chemistry\"\r\n          },\r\n          {\r\n            question: \"Which planet is closest to the Sun?\",\r\n            options: [\"Venus\", \"Mercury\", \"Earth\", \"Mars\"],\r\n            correctAnswer: 1,\r\n            explanation: \"Mercury is the innermost planet in our solar system.\",\r\n            category: \"science\",\r\n            difficulty: \"easy\",\r\n            subtopic: \"astronomy\"\r\n          }\r\n        ],\r\n        medium: [\r\n          {\r\n            question: \"What is the powerhouse of the cell?\",\r\n            options: [\"Nucleus\", \"Ribosome\", \"Mitochondria\", \"Endoplasmic Reticulum\"],\r\n            correctAnswer: 2,\r\n            explanation: \"Mitochondria produce ATP, the energy currency of cells.\",\r\n            category: \"science\",\r\n            difficulty: \"medium\",\r\n            subtopic: \"biology\"\r\n          }\r\n        ],\r\n        hard: [\r\n          {\r\n            question: \"What is the Heisenberg Uncertainty Principle?\",\r\n            options: [\r\n              \"Energy cannot be created or destroyed\",\r\n              \"Position and momentum cannot be precisely determined simultaneously\",\r\n              \"Matter and energy are equivalent\",\r\n              \"Entropy always increases\"\r\n            ],\r\n            correctAnswer: 1,\r\n            explanation: \"The uncertainty principle states that the more precisely we know position, the less precisely we can know momentum, and vice versa.\",\r\n            category: \"science\",\r\n            difficulty: \"hard\",\r\n            subtopic: \"physics\"\r\n          }\r\n        ]\r\n      },\r\n      history: {\r\n        easy: [\r\n          {\r\n            question: \"Who was the first President of the United States?\",\r\n            options: [\"Thomas Jefferson\", \"George Washington\", \"John Adams\", \"Benjamin Franklin\"],\r\n            correctAnswer: 1,\r\n            explanation: \"George Washington served as the first President from 1789 to 1797.\",\r\n            category: \"history\",\r\n            difficulty: \"easy\",\r\n            subtopic: \"american_history\"\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    const topicQuestions = mockQuestions[topic] || mockQuestions.science;\r\n    const difficultyQuestions = topicQuestions[difficulty] || topicQuestions.easy;\r\n    \r\n    // Repeat questions if we need more than available\r\n    const result = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const questionIndex = i % difficultyQuestions.length;\r\n      result.push({\r\n        ...difficultyQuestions[questionIndex],\r\n        id: `ai_generated_${Date.now()}_${i}`\r\n      });\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  // Generate questions based on user's weak areas\r\n  async generateAdaptiveQuestions(userStats, count = 5) {\r\n    // Analyze user's performance to identify weak areas\r\n    const weakAreas = this.analyzeWeakAreas(userStats);\r\n    \r\n    if (weakAreas.length === 0) {\r\n      // If no weak areas, generate mixed difficulty questions\r\n      return this.generateQuestions('general', 'medium', count);\r\n    }\r\n\r\n    // Generate questions focusing on weak areas\r\n    const questions = [];\r\n    for (const area of weakAreas.slice(0, 3)) { // Focus on top 3 weak areas\r\n      const areaQuestions = await this.generateQuestions(\r\n        area.category, \r\n        area.suggestedDifficulty, \r\n        Math.ceil(count / weakAreas.length)\r\n      );\r\n      questions.push(...areaQuestions);\r\n    }\r\n\r\n    return questions.slice(0, count);\r\n  }\r\n\r\n  // Analyze user statistics to find weak areas\r\n  analyzeWeakAreas(userStats) {\r\n    const weakAreas = [];\r\n    \r\n    if (userStats.categoryStats) {\r\n      Object.entries(userStats.categoryStats).forEach(([category, stats]) => {\r\n        if (stats.percentage < 70) { // Below 70% is considered weak\r\n          weakAreas.push({\r\n            category,\r\n            percentage: stats.percentage,\r\n            suggestedDifficulty: stats.percentage < 50 ? 'easy' : 'medium'\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    // Sort by weakest areas first\r\n    return weakAreas.sort((a, b) => a.percentage - b.percentage);\r\n  }\r\n\r\n  // Check if AI generation is available\r\n  isAIAvailable() {\r\n    return this.isEnabled;\r\n  }\r\n\r\n  // Get available topics for AI generation\r\n  getAvailableTopics() {\r\n    return [\r\n      'science', 'history', 'geography', 'technology', 'sports',\r\n      'literature', 'art', 'music', 'mathematics', 'philosophy',\r\n      'psychology', 'economics', 'politics', 'medicine', 'environment'\r\n    ];\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst aiQuestionGenerator = new AIQuestionGenerator();\r\nexport default aiQuestionGenerator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}